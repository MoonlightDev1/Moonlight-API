const { ttsave } = require('./scrape/ttdl');
const { igdl } = require('./scrape/igdl');
const { Tweets } = require('./scrape/twtdl')
const { fbdl } = require('./scrape/fbdl')
const { likeedl } = require('./scrape/likeedl')
const { threadsdl } = require('./scrape/threadsdl')
const { ytdl } = require('./scrape/ytdl')
const { savepin } = require('./scrape/pindl')
const { pins } = require('./scrape/search/pins')
/*const { sfilemobiSearch } = require('./scrape/search/sfiles')
const { sfilemobi } = require('./scrape/sfiledl')*/
const { searchSong } = require('./scrape/search/spotifys')
const { spotifydl, searching } = require ('./scrape/spotifydl')
const { geminiai } = require('./scrape/AI/gemini')
const { gemini } = require('./scrape/AI/geminiimg')
const { llmaai } = require('./scrape/AI/llma')
const { transcript } = require('./scrape/AI/transcript')
const { terabox } = require('./scrape/terabox')
const { bing } = require('./scrape/search/bing')
const { search } = require('./scrape/search/gimage')
const { tiktokStalk } = require('./scrape/stalk/tt')
const { scrapeCOC } = require('./scrape/stalk/coc')
const { leptonAi } = require('./scrape/AI/leptonai')
const { chatsandbox } = require('./scrape/AI/csb')
const { rmvbg } = require('./scrape/removebg')
const { hdimage } = require('./scrape/remini')
const { venice } = require('./scrape/AI/venice')
const { islamai } = require('./scrape/AI/islamai')
const { sswebs } = require('./scrape/misc/ssweb')
const { getStatus } = require('./scrape/misc/mcstats')
const { uphd } = require('./scrape/search/uhd')
const { catbox } = require('./scrape/misc/catbox')
const { lyrics } = require('./scrape/search/lirik')
const { avos } = require('./scrape/maker/avos')
const { otakudesuu } = require('./scrape/otakudesu')
const { steamStalk } = require('./scrape/stalk/steam')
const { xboxStalk } = require('./scrape/stalk/xbox')
const { MinecraftStalk } = require('./scrape/stalk/mc')
const { stalkig } = require('./scrape/stalk/ig')
const { alifSearch } = require('./scrape/search/alifs')
const { youtubeStalk } = require('./scrape/stalk/yt')
const { xhs } = require('./scrape/xhs')
const { stickerLy } = require('./scrape/stikerly')
const { Aio } = require('./scrape/aio')
const { depsek } = require('./scrape/AI/depsek')
const { capcutdl } = require('./scrape/ccdl')
const { googles } = require('./scrape/search/google')
const { Pxpic } = require('./scrape/pxpic')
const { SimSimi } = require('./scrape/AI/simi')
const { wiki } = require('./scrape/search/wiki')
const { ytdl2 } = require('./scrape/ytdl2')
const { ytdl3 } = require('./scrape/ytdl3')
const { ssig } = require('./scrape/igdl2')
const { main } = require('./scrape/AI/img2anime')
const { i2z } = require('./scrape/AI/img2zombie')
const { img2gtas } = require('./scrape/AI/img2gta')
const { fcs } = require('./scrape/AI/faceswap')
const { snackvid } = require('./scrape/snackvid')
const { soundc } = require('./scrape/soundc')
const { ytshort } = require('./scrape/ytshort')
const { ttSearch } = require('./scrape/search/tt')
const { ytdl4 } = require('./scrape/ytdl4')
const { whatmusisc } = require('./scrape/search/whatsong')

async function tiktoksearch(query, count = 50) {
  let z = await ttSearch(query, count = 50)
  return z
}

async function whatmusic(input) {
  let z = await whatmusisc(input)
  return z
}

async function youtube4(url, server = 1, type = 'video', resolution = '480') {
  let z = await ytdl4(url, server, type = 'video', resolution)
  return z
}

async function tiktok(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await ttsave.video(url)
  return JSON.parse(z)
}

async function snackvideo(url) {
  if(!url) return {
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  }
  let z = await snackvid(url)
  return z
}

async function ytshorts(url) {
  if(!url) return {
    author: "Herza",
    status: 400,
    msg: "Input parameter URI"
  }
  let z = await ytshort(url)
  return z
}

async function faceswap(mediaPath1, mediaPath2) {
  let z = await fcs(mediaPath1, mediaPath2);
    return z
}

async function otakudesu(type, query) {
  let z = await otakudesuu(type, query)
  return z
}

async function img2gta(imgUrl) {
  if(!imgUrl) return {
    author: "Herza",
    status: 400,
    msg: "Input Parameter URI"
  }
  let z = await img2gtas(imgUrl)
  return z
}

async function img2zombie(imgUrl) {
  if(!imgUrl) return {
    author: "Herza",
    status: 400,
    msg: "Input parameter URI"
  }
  let z = await i2z(imgUrl)
  return z
}

async function soundcloud(url) {
  if(!url) return {
    author: "Herza",
    status: 400,
    msg: "Input Parameter URI"
  }
  let z = await soundc(url)
  return z
}

async function simsimi(text, language = 'id') {
let z = await SimSimi(text, language)
  return z
}

async function wikipedia(query) {
  let z = await wiki(query)
  return z
}

async function instagramv2(url) {
let z = await ssig(url)
  return z
}

async function img2anime(imgUrl) {
  if(!imgUrl) return {
    author: "Herza",
    status: 400,
    msg: "input parameter imgUrl"
  }
  let z = await main(imgUrl)
  return z
}

async function youtubev2(url, type = "ytmp4", bitrate) {
  let z = await ytdl2(url, type, bitrate)
  return z
}

async function mcstalk(teks) {
  let z = await MinecraftStalk(teks)
  return z
}

async function pxpic(path, func) {
  let z = await Pxpic(path, func)
  return (z)
}

async function youtubev3(videoUrl, format = "480") {
let z = ytdl3(videoUrl, format = "480")
  return z
}

async function capcut(url) {
  let z = await capcutdl(url)
  return z
}

async function stalkcoc(playerTag) {
  let z = await scrapeCOC(playerTag)
  return z
}

async function aio(urls) {
  let z = await Aio(urls)
  return z
}

async function deepseek(text) {
  let z = await depsek(text)
  return z
}

async function stickerly(urlSticker) {
  let z = await stickerLy(urlSticker)
  return z
}

async function sxbox(teks) {
  let z = await xboxStalk(teks)
  return z
}

async function teraboxdl(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await terabox.download(url)
  return z
}

async function instagram(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await igdl(url)
  return z
}

async function twitter(url) {
  let z = new Tweets();
  let s = await z.get(url)
  return s
}

async function facebook(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await fbdl(url)
  return z
}

async function likee(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await likeedl(url)
  return z
}

async function threads(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await threadsdl(url)
  return z
}

async function youtube(type, ...args) {
  if (!type || args.length === 0) {
    return {
      author: "Herza",
      status: 400,
      msg: "input parameter URI and Argument"
    };
  }
  try {
    let z = await ytdl(type, ...args);
    return z;
  } catch (err) {
    return {
      author: "Herza",
      status: 500,
      msg: "An error occurred",
      error: err.message
    };
  }
}

async function pinterest(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter URI"
  })
  let z = await savepin(url)
  return z
}

async function uploadcdn(path) {
  if(!path) return({
    author: "Herza",
    status: 400,
    msg: "input parameter path"
  })
  let z = await catbox(path)
  return z
}

async function pinsearch(query) {
  if(!query) return({
    author: "Herza",
    status: 400,
    msg: "input parameter QUERY"
  })
  let z = await pins(query)
  return z
}

/*async function sfilemobiS(query, page) {
  if (!query || !page) {
    return {
      author: "Herza",
      status: 400,
      msg: "input parameter QUERY and PAGE"
    };
  }
  
  let z = await sfilemobiSearch(query, page);
  return z;
}

async function sfilemobidl(url) {
  if(!url) return({
    author: "Herza",
    status: 400,
    msg: "input parameter QUERY"
  })
  let z = await sfilemobi(url)
  return z
}*/

async function geminichat(text) {
  if(!text) return({
    author: "Herza",
    status: 400,
    msg: "input parameter text"
  })
  let z = await geminiai(text)
  return z
}

async function spotifysearch(query) {
  if(!query) return({
    author: "Herza",
    status: 400,
    msg: "input parameter QUERY"
  })
  let z = await searchSong(query)
  return z
}

async function spotydl(url) {
const { title, track, artis, durasi, image, download } = await spotifydl(url);

return ({
  author: "Herza",
  status: 200,
  data: {
title,
track,
artis,
durasi,
image,
download
  }
})
  }

async function geminiimg(text, path) {
  if(!text || !path) return({
    author: "Herza",
    status: 400,
    msg: "input parameter text or path"
  })
  let z = await gemini(text, path)
  return z
}

async function removebg(imageUrl) {
  if(!imageUrl) return({
    author: "Herza",
    status: 400,
    msg: "input parameter imageUrl"
  })
  let z = await rmvbg(imageUrl)
  return z
}

async function llma(text) {
  if(!text) return({
    author: "Herza",
    status: 400,
    msg: "input parameter text"
  })
  let z = await llmaai(text)
  return z
}

async function audioai(prompt, audpath, lang) {
  if(!prompt || !audpath || !lang) return({
    author: "Herza",
    status: 400,
    msg: "input parameter prompt, audpath or text"
  })
  let z = await transcript(prompt, audpath, lang)
  return z
}

async function bings(query) {
  if(!query) return({
    author: "Herza",
    status: 400,
    msg: "input parameter query"
  })
  let z = await bing.search(query)
  return z
}

async function bingv(query) {
  if(!query) return({
    author: "Herza",
    status: 400,
    msg: "input parameter query"
  })
  let z = await bing.videos(query)
  return z
}

async function gimage(searchTerm) {
  if(!searchTerm) return({
    author: "Herza",
    status: 400,
    msg: "input parameter query"
  })
  let z = await search(searchTerm)
  return z
}

async function ttstalk(username) {
  if(!username) return({
    author: "Herza",
    status: 400,
    msg: "input parameter username"
  })
  let z = await tiktokStalk(username)
  return z
}

async function text2img(prompt) {
  if(!prompt) return({
    author: "Herza",
    status: 400,
    msg: "input parameter prompt"
  })
  let z = await chatsandbox.text2img(prompt)
  return z
}

async function lepton(query) {
  if(!query) return({
    author: "Herza",
    status: 400,
    msg: "input parameter query"
  })
  let z = await leptonAi(query)
  return z
}

async function remini(kyoko, tysa, level) {
  let z;
  if (tysa === "enhance" && level) {
    z = await hdimage(kyoko, tysa, level);
  } else {
    z = await hdimage(kyoko, tysa);
  }
  return z;
}

async function islamicai(question) {
  if(!question) return({
    author: "Herza",
    status: 400,
    msg: "input parameter question"
  })
  let z = await islamai(question)
  return z
}

async function chatsandboxai(question, model) {
  if(!question || !model) return({
    author: "Herza",
    status: 400,
    msg: "input parameter question and model"
  })
  let z = await chatsandbox.chatbot(question, model)
  return z
}

async function veniceai(question, model) {
  if(!question || !model) return({
    author: "Herza",
    status: 400,
    msg: "input parameter question and model"
  })
  let z = await venice.chatbot(question, model)
  return z
}

async function openai(question, model = "openai") {
  if(!question) return({
    author: "Herza",
    status: 400,
    msg: "input parameter question and model"
  })
  let z = await chatsandbox.chatbot(question, model)
  return z
}

async function ssweb(url, type) {
  if(!url || !type) return({
    author: "Herza",
    status: 400,
    msg: "input parameter url or type"
  })
  let z = await sswebs(url, type)
  return z
}

async function mcstats(server, type) {
  if(!server || !type) return({
    author: "Herza",
    status: 400,
    msg: "input parameter server or type"
  })
  let z = await getStatus(server, type)
  return z
}

async function uhd(searchTerm) {
  if(!searchTerm) return({
    author: "Herza",
    status: 400,
    msg: "input parameter searchTerm"
  })
  let z = await uphd(searchTerm)
  return z
}

async function lyricss(song) {
  if(!song) return({
    author: "Herza",
    status: 400,
    msg: "Input valid parameter SONG"
  })
  let z = await lyrics(song)
  return z
}

async function textpro(text, effect) {
  let z = await avos(text, effect)
  return z
}

async function sstalk(teks) {
  let z = await steamStalk(teks)
  return z
}

async function igstalk(username) {
  let z = await stalkig(username)
  return z
}

async function ytstalk(username) {
  let z = await youtubeStalk(username)
  return z
}

async function alifsearch(query) {
  let z = await alifSearch(query)
  return z
}

async function rednote(link) {
  let z = await xhs(link)
  return z
}

async function googleit(query) {
  let z = await googles(query)
  return z
}

module.exports = { 
  tiktok,
  instagram,
  twitter, 
  facebook, 
  likee, 
  threads, 
  youtube,
  pinterest, 
  pinsearch, 
/*  sfilemobiS, 
  sfilemobidl,*/
  spotifysearch, 
  spotydl,
  geminichat,
  geminiimg, 
  llma, 
  audioai,
  teraboxdl,
  bings, 
  bingv,
  gimage,
  ttstalk,
  text2img,
  lepton,
  removebg, 
  remini,
  chatsandboxai,
  veniceai, 
  islamicai, 
  openai,
  ssweb, 
  mcstats,
  uhd, 
  uploadcdn,
  lyricss,
  textpro,
  otakudesu,
  sstalk,
  sxbox,
  mcstalk,
  igstalk, 
  alifsearch,
  ytstalk, 
  rednote,
  stickerly,
  aio,
  deepseek,
  capcut,
  googleit,
  stalkcoc,
  pxpic, 
  simsimi, 
  youtubev2,
  youtubev3, 
  wikipedia,
  instagramv2,
  img2anime,
  img2zombie,
  img2gta,
  faceswap,
  snackvideo,
  soundcloud,
  ytshorts,
  youtube4,
  tiktoksearch,
  whatmusic
};