// SCRAPER BY https://wa.me/6285389296108

const axios = require('axios');
const cheerio = require('cheerio');

async function otakudesuu(type, query) {
  const baseUrl = 'https://otakudesu.cloud';

  try {
    switch (type) {
      case 'search':
        const searchUrl = `${baseUrl}/?s=${encodeURIComponent(query)}&post_type=anime`;
        const searchResponse = await axios.get(searchUrl);
        const $search = cheerio.load(searchResponse.data);
        const searchResults = [];

        $search('ul.chivsrc li').each((index, element) => {
          const title = $search(element).find('h2 a').text();
          const link = $search(element).find('h2 a').attr('href');
          const image = $search(element).find('img').attr('src');
          const genres = [];

          $search(element).find('.set a').each((i, el) => {
            genres.push($search(el).text());
          });

          const status = $search(element).find('.set:contains("Status")').text().replace('Status : ', '').trim();
          const rating = $search(element).find('.set:contains("Rating")').text().replace('Rating : ', '').trim();

          searchResults.push({ title, link, image, genres, status, rating });
        });

        return { author: "Herza", status: 200, data: searchResults };

      case 'details':
        const detailsResponse = await axios.get(query);
        const $details = cheerio.load(detailsResponse.data);

        const thumbnail = $details('img.attachment-post-thumbnail').attr('src');
        const judul = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Judul')).parent().text().trim().split(': ')[1];
        const skor = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Skor')).parent().text().trim().split(': ')[1];
        const produser = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Produser')).parent().text().trim().split(': ')[1];
        const tipe = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Tipe')).parent().text().trim().split(': ')[1];
        const status = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Status')).parent().text().trim().split(': ')[1];
        const studio = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Studio')).parent().text().trim().split(': ')[1];
        const rilis = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Tanggal Rilis')).parent().text().trim().split(': ')[1];
        const episode = $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Total Episode')).parent().text().trim().split(': ')[1];

        let sinopsis = '';
        $details('.sinopc p').each((index, element) => {
          sinopsis += $details(element).text().trim() + '\n';
        });

        const genreArray = [];
        $details('div.infozingle span b').filter((index, element) => $details(element).text().includes('Genre')).siblings('a').each((index, element) => {
          genreArray.push($details(element).text().trim());
        });
        const genre = genreArray.join(', ');

        const episodeLinks = [];
        $details('.episodelist ul li span a').each((index, element) => {
          episodeLinks.push($details(element).attr('href'));
        });

        return {
          author: "Herza",
          status: 200,
          data: {
            judul,
            skor,
            produser,
            tipe,
            status,
            studio,
            rilis,
            episode,
            genre,
            thumbnail,
            episodeLinks,
            sinopsis: sinopsis.trim()
          }
        };

      case 'latest':
        const latestResponse = await axios.get(`${baseUrl}/ongoing-anime/`);
        const $latest = cheerio.load(latestResponse.data);
        const latestUpdates = [];

        $latest('ul > li .detpost').each((index, element) => {
          const episode = $latest(element).find('.epz').text().trim();
          const day = $latest(element).find('.epztipe').text().trim();
          const date = $latest(element).find('.newnime').text().trim();
          const link = $latest(element).find('.thumb a').attr('href');
          const title = $latest(element).find('.thumbz h2.jdlflm').text().trim();

          latestUpdates.push({ title, episode, day, date, link });
        });

        return { author: "Herza", status: 200, data: latestUpdates };

      case 'download':
        const downloadResponse = await axios.get(query);
        const $download = cheerio.load(downloadResponse.data);
        const downloads = [];

        $download('li').each((_, element) => {
          const resolution = $download(element).find('strong').text().trim();
          const size = $download(element).find('i').text().trim();
          const downloadLinks = [];

          $download(element).find('a').each((_, link) => {
            const server = $download(link).text().trim();
            const url = $download(link).attr('href');
            if (server && url) {
              downloadLinks.push({ server, url });
            }
          });

          if (resolution && downloadLinks.length > 0) {
            downloads.push({
              resolution,
              size: size || "N/A",
              downloadLinks
            });
          }
        });

        return { author: "Herza", status: 200, data: downloads };

      default:
        return { author: "Herza", status: 400, data: { error: 'Tipe tidak valid. Gunakan: search, details, latest, atau download' } };
    }
  } catch (error) {
    console.error("Error:", error);
    return { author: "Herza", status: 500, data: { error: "Internal Server Error" } };
  }
}

module.exports = { otakudesuu };
