const axios = require('axios');
const cheerio = require('cheerio');
const FormData = require('form-data');

class Tweets {
  constructor() {
    this.baseUrl = 'https://ssstwitter.com';
    this.author = 'Herza';
  }

  async get(url) {
    try {
      const formData = new FormData();
      formData.append('id', url);
      formData.append('locale', 'en');
      formData.append('tt', '4eaed0968c822b51c2661ca90ed1d030');
      formData.append('ts', Math.floor(Date.now() / 1000));
      formData.append('source', 'form');

      const response = await axios.post(this.baseUrl, formData, {
        headers: {
          ...formData.getHeaders(),
          'HX-Request': 'true',
          'HX-Target': 'target',
          'HX-Current-URL': `${this.baseUrl}/how-to-download-twitter-video`
        }
      });

      const $ = cheerio.load(response.data);
      const links = [];

      $('.download_link').each((i, el) => {
        const href = $(el).attr('href');
        const text = $(el).text().trim();

        if (href?.includes('ssscdn.io') && !$(el).hasClass('mp3_convert')) {
          const resolution = text.match(/\d+x\d+/)?.[0] || 'unknown';
          links.push({
            resolution,
            url: href
          });
        }
      });

      const sortedLinks = links.sort((a, b) => {
        const [aWidth] = a.resolution.split('x').map(Number);
        const [bWidth] = b.resolution.split('x').map(Number);
        return bWidth - aWidth;
      });

      const qualityMap = {
        HD: sortedLinks[0] || {},
        SEMI_HD: sortedLinks[1] || {},
        SD: sortedLinks[2] || {}
      };

      return {
        author: this.author,
        status: 200,
        results: {
          HD: qualityMap.HD,
          SEMI_HD: qualityMap.SEMI_HD,
          SD: qualityMap.SD
        }
      };

    } catch (error) {
      return {
        author: this.author,
        status: 500,
        results: {
          HD: {},
          SEMI_HD: {},
          SD: {}
        }
      };
    }
  }
}

module.exports = { Tweets };