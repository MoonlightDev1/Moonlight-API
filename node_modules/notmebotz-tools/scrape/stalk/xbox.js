/*
*
* [ *SCRAPE XBOX STALK* ]
* Created By Hann
* 
* Channel: https://whatsapp.com/channel/0029Vaf07jKCBtxAsekFFk3i
*
**/

const axios = require('axios');
const cheerio = require('cheerio');
const { createCanvas } = require('canvas');
const fetch = require('node-fetch');
const FormData = require('form-data');
const { fromBuffer } = require('file-type');

async function uploadToCDN(buffer) {
    const { ext } = await fromBuffer(buffer);
    const bodyForm = new FormData();
    bodyForm.append("fileToUpload", buffer, "file." + ext);
    bodyForm.append("reqtype", "fileupload");

    const res = await fetch("https://catbox.moe/user/api.php", {
        method: "POST",
        body: bodyForm,
    });

    return await res.text();
}

async function xboxStalk(teks) {
    try {
        const { data } = await axios.get('https://xboxgamertag.com/search/' + teks);
        const $ = cheerio.load(data);

        let gamerscore = 0;
        let gamesPlayed = 0;

        $('.profile-detail-item').each((index, element) => {
            const title = $(element).find('span').text();
            const value = $(element).text().replace(title, '').trim();
            if (title.includes("Gamerscore")) {
                gamerscore = parseInt(value.replace(/,/g, ''), 10) || 0;
            }
            if (title.includes("Games Played")) {
                gamesPlayed = parseInt(value, 10) || 0;
            }
        });

        const gamertag = {
            name: $('h1 a').text(),
            avatar: $('.avatar img').attr('src'),
            gamerscore: gamerscore,
            gamesPlayed: gamesPlayed,
            gameHistory: []
        };

        $('.recent-games .game-card').each((index, element) => {
            const game = {
                title: $(element).find('h3').text(),
                lastPlayed: $(element).find('.text-sm').text().replace('Last played ', ''),
                platforms: $(element).find('.text-xs').text(),
                gamerscore: $(element).find('.badge:contains("Gamerscore")').parent().next().text().trim(),
                achievements: $(element).find('.badge:contains("Achievements")').parent().next().text().trim(),
                progress: ($(element).find('.progress-bar').attr('style') || 'width: 0%;').match(/width: (.*?);/)[1] || '0%'
            };
            gamertag.gameHistory.push(game);
        });

        const imageUrl = await generateAndUploadImage(gamertag);
        gamertag.img_url = imageUrl;

        return gamertag;
    } catch (error) {
        return error.message;
    }
}

async function generateAndUploadImage(gamertag) {
    const canvasWidth = 800;
    const canvasHeight = 1200;
    const canvas = createCanvas(canvasWidth, canvasHeight);
    const ctx = canvas.getContext('2d');

    ctx.fillStyle = '#2a2a2a';
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);

    ctx.fillStyle = '#3a3a3a';
    ctx.fillRect(0, 0, canvasWidth, 150);

    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 30px Arial';
    ctx.fillText(gamertag.name, 30, 50);

    ctx.font = '20px Arial';
    ctx.fillText(`Gamerscore: ${gamertag.gamerscore}`, 30, 90);
    ctx.fillText(`Games Played: ${gamertag.gamesPlayed}`, 30, 120);

    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 25px Arial';
    ctx.fillText('Game History', 30, 200);

    let yPosition = 240;
    let xPosition = 30;

    const maxItemsPerColumn = 6;
    const progressWidth = 300;
    let gameCount = 0;

    gamertag.gameHistory.forEach((game) => {
        if (gameCount >= maxItemsPerColumn) {
            xPosition += 400;
            yPosition = 240;
            gameCount = 0;
        }

        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 18px Arial';
        ctx.fillText(game.title, xPosition, yPosition);

        ctx.font = '16px Arial';
        ctx.fillStyle = '#cccccc';
        ctx.fillText(`Last Played: ${game.lastPlayed}`, xPosition, yPosition + 25);
        ctx.fillText(`Gamerscore: ${game.gamerscore}`, xPosition, yPosition + 50);
        ctx.fillText(`Achievements: ${game.achievements}`, xPosition, yPosition + 75);

        ctx.fillStyle = '#444';
        ctx.fillRect(xPosition, yPosition + 100, progressWidth, 20);

        ctx.fillStyle = '#00ff00';
        const progress = parseFloat(game.progress) || 0;
        ctx.fillRect(xPosition, yPosition + 100, (progress / 100) * progressWidth, 20);

        yPosition += 150;
        gameCount += 1;
    });

    const buffer = canvas.toBuffer('image/png');
    const cdnUrl = await uploadToCDN(buffer);
    return cdnUrl;
}

module.exports = { xboxStalk }